/*************************************************************************
	> File Name: EUler31.cpp
	> Author: 
	> Mail: 
	> Created Time: 2018年07月27日 星期五 11时39分25秒
 ************************************************************************/

#include <stdio.h>
#define MAX_N 8

int curren[MAX_N] = {1, 2, 5, 10, 20, 50, 100, 200};
//理解时可以从二维角度理解，但编码时发现其能降维，用一维实现
int ans[201] = {0};

int main(){
    //任意一种货币拼凑０元钱的方法都是１，对边界值的处理
    ans[0] = 1;
    //外层循环是对每一种货币产生情况进行生成，最终只保留最后的结果数组
    for(int i = 0; i < MAX_N; i++){
        //内层循环是对外层遍历的每一种货币组成相应的钱数进行生成
        for(int j = curren[i]; j < 201; j++){
            ans[j] += ans[j - curren[i]];
        }
    }
    printf("%d\n", ans[200]);
    return 0;
}
