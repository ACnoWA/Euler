/*************************************************************************
	> File Name: Euler25.cpp
	> Author: 
	> Mail: 
	> Created Time: 2018年07月27日 星期五 10时08分18秒
 ************************************************************************/

#include <stdio.h>
//采用循环数组的方式来进行斐波那契数组的生成，对二维数组中的每一个一维数组都采用大数加法的初始方式
int fib[3][1005] = {{0, 0}, {1, 1}, {1, 1}};
int n = 2;
//由于初始化时是初始化为题目所给的第一项和第二项，所以n初始为２，但又由于数组下标的原因，所以将第三项放在数组的第一项，数列的第一项和第二项则分别放在数组的第一项和第二项

int main(){
    while(fib[n % 3][0] < 1000){
        n += 1;
        int *a = fib[n % 3], *b = fib[(n - 1) % 3], *c  = fib[(n - 2) % 3];
        a[0] = b[0];//要生成的新项的长度和最接近他的项的长度相似
        //大整数加法模板
        for(int i = 1; i <= a[0]; i++){
            a[i] = b[i] + c[i];
        }
        for(int j = 1; j <= a[0]; j++){
            if(a[j] < 10) continue;
            a[j + 1] += a[j] / 10;
            a[j] %= 10;
            a[0] += (a[0] == j);
        }
    }

    printf("%d\n", n);
    return 0;
}
